[["index.html", "Sleep Revolution: Sleep Apnea Cost 1 Estimating costs of sleep apnea", " Sleep Revolution: Sleep Apnea Cost Jani Miettinen, Ida Alakörkkö, Anna But &amp; Reijo Sund 1 Estimating costs of sleep apnea LAST UPDATE: 2023-01-16 13:03:20 THIS PROJECT ESTIMATES SLEEP APNEA COSTS IN EUROPE. DATA IS PUBLICLY AVAILABLE AT http://ghdx.healthdata.org/ BY CC BY-NC-ND 4.0 LICENCE. RESULTS CAN BE REPLICATED BY THIS GUIDE. This project has received funding from the European Union’s Horizon 2020 research and innovation programme under grant agreement no. 965417. We are interested sleep apnea costs in Europe between age group of 15-74 years old. Data is collected from the year 2019. Following countries are included to the estimation: ## [1] &quot;Albania&quot; &quot;Armenia&quot; &quot;Austria&quot; &quot;Azerbaijan&quot; &quot;Belarus&quot; ## [6] &quot;Belgium&quot; &quot;Bosnia and Herzegovina&quot; &quot;Bulgaria&quot; &quot;Croatia&quot; &quot;Cyprus&quot; ## [11] &quot;Czechia&quot; &quot;Denmark&quot; &quot;Estonia&quot; &quot;Finland&quot; &quot;France&quot; ## [16] &quot;Georgia&quot; &quot;Germany&quot; &quot;Greece&quot; &quot;Hungary&quot; &quot;Iceland&quot; ## [21] &quot;Ireland&quot; &quot;Italy&quot; &quot;Kazakhstan&quot; &quot;Latvia&quot; &quot;Lithuania&quot; ## [26] &quot;Luxembourg&quot; &quot;Malta&quot; &quot;Republic of Moldova&quot; &quot;Montenegro&quot; &quot;Netherlands&quot; ## [31] &quot;North Macedonia&quot; &quot;Norway&quot; &quot;Poland&quot; &quot;Portugal&quot; &quot;Romania&quot; ## [36] &quot;Russian Federation&quot; &quot;Serbia&quot; &quot;Slovakia&quot; &quot;Slovenia&quot; &quot;Spain&quot; ## [41] &quot;Sweden&quot; &quot;Switzerland&quot; &quot;Turkey&quot; &quot;Ukraine&quot; &quot;United Kingdom&quot; # plot_europe_cost.png Sleep apnea cost can be estimated by top-down calculation method presented in Armeni et al. (2019) Cost-of-illness study of Obstructive Sleep Apnea Syndrome (OSAS) in Italy. This project utilizes estimation method with other open data science methods for 42 countries. Guide follows step-by-step data processing by R and packages such as duckdb, tidyverse, vroom and dplyr. "],["data.html", "2 Data 2.1 Population 2.2 IHME dataset", " 2 Data In this section we are going to download and explore datasets before editing and storing data into duckdb. Data sets consists of the population and disease prevalances information. It can be downloaded as (several) CSV-files from the links below: Population data IHME data Download data manually and store them to data/ folder. There are many csv-files so loading those can be done easily with vroom and fs packages. Before transferring datasets into mighty duckdb database, we find out little bit more what these data sets holds. 2.1 Population We are interested of the population by age and gender in European countries. 2.1.1 Load data into R Load the vroom() library. Load one data set into IHME2010 object and use the id argument to add the file name to the data frame. Use file_name as the argument’s value. Load the file spec into a variable called spec, using the spec() command. library(vroom) IHME2010 &lt;- vroom(&quot;data/IHME_GBD_2019_POP_2010_2019_SYA/IHME_GBD_2019_POP_SYA_2010_Y2021M01D28.CSV&quot;, id = &quot;file_name&quot;) spec &lt;- spec(IHME2010) spec 2.1.2 Explore dataset Explore dataset and it’s variables by summary() summary(IHME2010) rm(IHME2010) # Remove dataset from memory 2.1.3 Load and modify multiple files Load the fs and dplyr libraries. Load to a variable named files list files in the ./data/ folder using the dir_ls() function, use the glob argument to pass a wildcard to list CSV files only. library(fs) library(dplyr) loc &lt;- (&quot;data/IHME_GBD_2019_POP_2010_2019_SYA/&quot;) files &lt;- dir_ls(loc, glob = &quot;*.CSV&quot;) files Group population by location_name, year_id, sex_name, age_group_name, file_name and get the total of val and the number of items. Name them total_population and items respectively. Name the new dataset countries. Define the countries variable as NULL prior to the for loop and add a bind_rows() step to countries to preserve each summarized view. Remove the population variable at the end of each cycle. countries &lt;- NULL for(i in seq_along(files)) { population &lt;- vroom(files[i], id = &quot;file_name&quot;) countries &lt;- population %&gt;% group_by(location_name, year_id, sex_name, age_group_name, age_group_id) %&gt;% summarise(total_population = sum(val, na.rm = T)) %&gt;% bind_rows(countries) rm(population) } Preview the countries dataset by checking how many countries are in the dataset and calculating total population by year ## How many countries/locations are included? length(unique(countries$location_name)) ## Calculate countries population by year countries %&gt;% filter(sex_name == &quot;both&quot;) %&gt;% group_by(location_name, year_id, sex_name) %&gt;% summarise(pop = sum(total_population)) -&gt; countries_population head(countries_population) 2.1.4 Included European countries Below is a list of 51 European countries. See which of these countries are NOT included in population dataset europe &lt;- c(&quot;Albania&quot;,&quot;Andorra&quot;,&quot;Armenia&quot;,&quot;Austria&quot;,&quot;Azerbaijan&quot;,&quot;Belarus&quot;,&quot;Belgium&quot;,&quot;Bosnia and Herzegovina&quot;,&quot;Bulgaria&quot;,&quot;Croatia&quot;,&quot;Cyprus&quot;,&quot;Czechia&quot;,&quot;Denmark&quot;,&quot;Estonia&quot;,&quot;Finland&quot;,&quot;France&quot;,&quot;Georgia&quot;,&quot;Germany&quot;,&quot;Greece&quot;,&quot;Hungary&quot;,&quot;Iceland&quot;,&quot;Ireland&quot;,&quot;Italy&quot;,&quot;Kazakhstan&quot;,&quot;Latvia&quot;,&quot;Lithuania&quot;,&quot;Luxembourg&quot;,&quot;Malta&quot;,&quot;Republic of Moldova&quot;,&quot;Monaco&quot;,&quot;Montenegro&quot;,&quot;Netherlands&quot;,&quot;North Macedonia&quot;,&quot;Norway&quot;,&quot;Poland&quot;,&quot;Portugal&quot;,&quot;Romania&quot;,&quot;Russian Federation&quot;,&quot;San Marino&quot;,&quot;Serbia&quot;,&quot;Slovakia&quot;,&quot;Slovenia&quot;,&quot;Spain&quot;,&quot;Sweden&quot;,&quot;Switzerland&quot;,&quot;Turkey&quot;,&quot;Ukraine&quot;,&quot;United Kingdom&quot;) Create new dataset which has only europe countries and compare which are not included eucountries &lt;- countries %&gt;% filter(location_name %in% europe) ## How many European countries are included in the dataset? length(unique(eucountries$location_name)) ## These countries are missing europe[!europe %in% eucountries$location_name] 2.1.5 Europe total population in 2019 Calculate Total population in 2019 of selected European countries eucountries %&gt;% filter(sex_name == &quot;both&quot; &amp; year_id == 2019 &amp; location_name %in% europe) %&gt;% group_by(2019) %&gt;% summarise(pop = sum(total_population)) -&gt; total_population_2019 total_population_2019 2.1.6 PLOT: Finland population 2019 Draw a plot of Finland population in 2019 by age and gender ## re-adjust age_group variable of the population for filtering eucountries$age_group &lt;- eucountries$age_group_name eucountries$age_group[eucountries$age_group == &quot;&lt;1 year&quot;] &lt;- 0 eucountries$age_group[eucountries$age_group == &quot;95 plus&quot;] &lt;- 95 eucountries$age_group &lt;- as.integer(eucountries$age_group) ## plot age distribution library(ggplot2) ggplot(data = eucountries[eucountries$sex_name %in% c(&quot;female&quot;, &quot;male&quot;) &amp; eucountries$location_name == &quot;Finland&quot; &amp; eucountries$year_id == 2019, ]) + geom_bar(aes(x=age_group, y=total_population, fill=sex_name), stat = &quot;identity&quot;) + labs(x=&quot;age&quot;, y=&quot;freq&quot;, title=&quot;Finland population 2019&quot;) 2.1.7 PLOT: European countries population Filter and group dataset to get total population by years and countries eucountries %&gt;% filter(sex_name == &quot;both&quot; &amp; year_id == 2019) %&gt;% group_by(location_name, year_id) %&gt;% summarise(total_population = sum(total_population)) -&gt; populations populations$year_id &lt;- as.integer(populations$year_id) Draw ordered population bar diagram of the populations options(scipen = 999) ggplot(data = populations) + geom_bar(aes(x=reorder(location_name,total_population), y=total_population, group=year_id), position=&quot;dodge&quot;, stat=&quot;identity&quot;) + coord_flip() + labs(x=&quot;&quot;, y=&quot;population&quot;, title = &quot;Countries total population in 2019&quot;) 2.2 IHME dataset Exploring IHME dataset which is publicly available at GBD webpage. Dataset has prevalences and incidences of different disease by countries, age group and sex. You can download full dataset by this link. 2.2.1 Load few datasets Firstly load libraries library(vroom) library(fs) library(dplyr) Downloaded data is stored in data/ihmedata/. List files under the data location by using fs-package and load few files files &lt;- fs::dir_ls (&quot;data/ihmedata/&quot;, recurse = T, glob = &quot;*.csv&quot;) vroom(file = files, n_max = 1000, id = &quot;file_name&quot;) Let’s find out what two datasets has using command spec() and summary() d1 &lt;- vroom(file = files[1]) spec(d1) summary(d1) d2 &lt;- vroom(file = files[2]) spec(d2) summary(d2) Locations on each datasets length(unique(d1$location_name)) length(unique(d2$location_name)) Causes on each datasets length(unique(d1$cause_name)) length(unique(d2$cause_name)) d1 %&gt;% group_by(location_name, cause_name) %&gt;% summarise(n = n(), val=sum(val)) %&gt;% arrange(n) %&gt;% tail(10) d2 %&gt;% group_by(location_name, cause_name) %&gt;% summarise(n = n(), val=sum(val)) %&gt;% arrange(n) %&gt;% tail(10) 2.2.2 Load all datasets Load all datasets to one object and filter only Europe countries europe &lt;- c(&quot;Albania&quot;,&quot;Andorra&quot;,&quot;Armenia&quot;,&quot;Austria&quot;,&quot;Azerbaijan&quot;,&quot;Belarus&quot;,&quot;Belgium&quot;,&quot;Bosnia and Herzegovina&quot;,&quot;Bulgaria&quot;,&quot;Croatia&quot;,&quot;Cyprus&quot;,&quot;Czechia&quot;,&quot;Denmark&quot;,&quot;Estonia&quot;,&quot;Finland&quot;,&quot;France&quot;,&quot;Georgia&quot;,&quot;Germany&quot;,&quot;Greece&quot;,&quot;Hungary&quot;,&quot;Iceland&quot;,&quot;Ireland&quot;,&quot;Italy&quot;,&quot;Kazakhstan&quot;,&quot;Kosovo&quot;,&quot;Latvia&quot;,&quot;Liechtenstein&quot;,&quot;Lithuania&quot;,&quot;Luxembourg&quot;,&quot;Malta&quot;,&quot;Moldova&quot;,&quot;Monaco&quot;,&quot;Montenegro&quot;,&quot;Netherlands&quot;,&quot;North Macedonia&quot;,&quot;Norway&quot;,&quot;Poland&quot;,&quot;Portugal&quot;,&quot;Romania&quot;,&quot;Russian Federation&quot;,&quot;San Marino&quot;,&quot;Serbia&quot;,&quot;Slovakia&quot;,&quot;Slovenia&quot;,&quot;Spain&quot;,&quot;Sweden&quot;,&quot;Switzerland&quot;,&quot;Turkey&quot;,&quot;Ukraine&quot;,&quot;United Kingdom&quot;,&quot;Vatican City&quot;) ihme &lt;- NULL for(i in seq_along(files)) { ihme &lt;- ihme %&gt;% rbind(vroom(files[i], id = &quot;file_name&quot;)) %&gt;% filter(location_name %in% europe) } 2.2.3 Summary Get basic info of the dataset summary(ihme) "],["database.html", "3 Database 3.1 Load datasets 3.2 Moving data to duckdb", " 3 Database In this section we are going to clean and store datasets into duckdb database. We are going to filter datasets only to include these countries: ## [1] &quot;Albania&quot; &quot;Armenia&quot; &quot;Austria&quot; &quot;Azerbaijan&quot; &quot;Belarus&quot; ## [6] &quot;Belgium&quot; &quot;Bosnia and Herzegovina&quot; &quot;Bulgaria&quot; &quot;Croatia&quot; &quot;Cyprus&quot; ## [11] &quot;Czechia&quot; &quot;Denmark&quot; &quot;Estonia&quot; &quot;Finland&quot; &quot;France&quot; ## [16] &quot;Georgia&quot; &quot;Germany&quot; &quot;Greece&quot; &quot;Hungary&quot; &quot;Iceland&quot; ## [21] &quot;Ireland&quot; &quot;Italy&quot; &quot;Kazakhstan&quot; &quot;Latvia&quot; &quot;Lithuania&quot; ## [26] &quot;Luxembourg&quot; &quot;Malta&quot; &quot;Republic of Moldova&quot; &quot;Montenegro&quot; &quot;Netherlands&quot; ## [31] &quot;North Macedonia&quot; &quot;Norway&quot; &quot;Poland&quot; &quot;Portugal&quot; &quot;Romania&quot; ## [36] &quot;Russian Federation&quot; &quot;Serbia&quot; &quot;Slovakia&quot; &quot;Slovenia&quot; &quot;Spain&quot; ## [41] &quot;Sweden&quot; &quot;Switzerland&quot; &quot;Turkey&quot; &quot;Ukraine&quot; &quot;United Kingdom&quot; First load necessary packages library(fs) library(dplyr) library(vroom) library(readxl) 3.1 Load datasets 3.1.1 Population dataset Population dataset is in folder data/IHME_GBD_2019_POP_2010_2019_SYA/. Let’s load all file locations loc &lt;- (&quot;data/IHME_GBD_2019_POP_2010_2019_SYA/&quot;) files &lt;- dir_ls(loc, glob = &quot;*.CSV&quot;) files Load all files and check available countries and years Load all files and clean the datasets POP &lt;- NULL for(i in seq_along(files)) { population &lt;- vroom(files[i], id = &quot;file_name&quot;) POP &lt;- population %&gt;% group_by(location_name, year_id, sex_name, age_group_name, age_group_id) %&gt;% summarise(total_population = sum(val, na.rm = T)) %&gt;% bind_rows(POP) rm(population) } ## create a new age_group variable by re-adjusting age_group_name variable to integer unique(POP$age_group_name) POP$age_group &lt;- POP$age_group_name POP$age_group[POP$age_group == &quot;&lt;1 year&quot;] &lt;- 0 POP$age_group[POP$age_group == &quot;95 plus&quot;] &lt;- 95 POP$age_group &lt;- as.integer(POP$age_group) ## filter only europe countries POP &lt;- POP %&gt;% filter(location_name %in% europe) ## Change location_names to universal ## change original to this: &quot;Bosnia and Herz.&quot;&gt; &quot;Bosnia and Herzegovina&quot; ## change original to this: Czechia&quot; &gt; (&quot;Czech Rep.&quot;) &gt; &quot;Czech Republic&quot; ## change original to this: &quot;Russian Federation&quot; &gt; &quot;Russia&quot; ## change original to this: &quot;North Macedonia&quot; &gt; &quot;Macedonia&quot; ## change original to this: &quot;Republic of Moldova&quot; &gt; &quot;Moldova&quot; # unique(POP$location_name) # POP[POP$location_name == &quot;Bosnia and Herz.&quot;,] &lt;- &quot;Bosnia and Herzegovina&quot; POP$location_name[POP$location_name == &quot;Czechia&quot;] &lt;- &quot;Czech Republic&quot; POP$location_name[POP$location_name == &quot;Russian Federation&quot;] &lt;- &quot;Russia&quot; POP$location_name[POP$location_name == &quot;North Macedonia&quot;] &lt;- &quot;Macedonia&quot; POP$location_name[POP$location_name == &quot;Republic of Moldova&quot;] &lt;- &quot;Moldova&quot; Calculate Total population in 2019 of selected European countries ## Calculate Total population in 2019 of selected European countries POP %&gt;% filter(sex_name == &quot;both&quot; &amp; year_id == 2019) %&gt;% group_by(2019) %&gt;% summarise(pop = sum(total_population)) -&gt; total_population_2019 total_population_2019 3.1.2 IHME dataset Datasets are in folder data/ihmedata/. Load all the file location into a object. files &lt;- fs::dir_ls (&quot;data/ihmedata/&quot;, recurse = T, glob = &quot;*.csv&quot;) # files Load all files and filter only selected countries IHME &lt;- NULL for(i in seq_along(files)) { IHME &lt;- IHME %&gt;% rbind(vroom(files[i], id = &quot;file_name&quot;)) %&gt;% filter(location_name %in% europe) } 3.1.3 Calculator files We have included a Excel file which holds data for the calculator. These data are taken from the article Ameni et al. (2019) Cost-of-illness study of Obstructive Sleep Apnea Syndrome (OSAS) in Italy tbl1 &lt;- readxl::read_xlsx(&quot;files/osa_tables.xlsx&quot;, sheet = &quot;causes&quot;) tbl4 &lt;- readxl::read_xlsx(&quot;files/osa_tables.xlsx&quot;, sheet = &quot;causes_simple&quot;) tbl2 &lt;- readxl::read_xlsx(&quot;files/osa_tables.xlsx&quot;, sheet = &quot;osa_armeni&quot;) tbl3 &lt;- readxl::read_xlsx(&quot;files/osa_tables.xlsx&quot;, sheet = &quot;osa_benjafield&quot;) 3.2 Moving data to duckdb In this section we move created datasets to duckdb database and trasform to parquet file. Further reading: https://duckdb.org/docs/api/r https://duckdb.org/2021/12/03/duck-arrow.html Firstly install duckdb and arrow packages install.packages(&quot;duckdb&quot;) install.packages(&quot;arrow&quot;) Create a connection and move datasets POP and IHME into duckdb. library(duckdb) con = dbConnect(duckdb::duckdb(), dbdir=&quot;./data/sleep22.duckdb&quot;, read_only=FALSE) dbWriteTable(con, &quot;IHME&quot;, IHME, overwrite=TRUE) dbWriteTable(con, &quot;POP&quot;, POP, overwrite=TRUE) dbWriteTable(con, &quot;causes&quot;, tbl1, overwrite=TRUE) # old slapnea dbWriteTable(con, &quot;osa_armeni&quot;, tbl2, overwrite=TRUE) dbWriteTable(con, &quot;osa_benjafield&quot;, tbl3, overwrite=TRUE) dbWriteTable(con, &quot;causes_simple&quot;, tbl4, overwrite=TRUE) dbDisconnect(conn = con) 3.2.1 Transform to parquet Transform whole database to parquet file system con = dbConnect(duckdb::duckdb(), dbdir=&quot;./data/sleep22.duckdb&quot;, read_only=FALSE) if(dir.exists(&quot;data/parquet/&quot;)) fs::dir_delete(&quot;data/parquet/&quot;) if(!dir.exists(&quot;data/parquet/&quot;)) dir.create(&quot;data/parquet/&quot;) dbSendQuery(con, &quot;EXPORT DATABASE &#39;data/parquet/&#39; (FORMAT PARQUET);&quot;) dbDisconnect(conn = con) #END "],["explorative-data-analysis.html", "4 Explorative Data Analysis 4.1 IHME distinct values 4.2 PLOT: Population in countries 4.3 PLOT: Finland population 2019 4.4 TABLE: Prevalences 4.5 TABLE: Incidences 4.6 TABLE: Deaths 4.7 TABLE: Prevalences per countries", " 4 Explorative Data Analysis In this section we are going to find out more about the data and it’s variables, visualizing data and creating tables. 4.1 IHME distinct values Let’s find out different distinct values of the variables 4.1.1 measure_name ## measure_name ## 1 Prevalence ## 2 Incidence ## 3 Deaths 4.1.2 sex_name ## sex_name ## 1 Female ## 2 Both ## 3 Male 4.1.3 age_name ## age_name ## 1 35 to 39 ## 2 40 to 44 ## 3 45 to 49 ## 4 50 to 54 ## 5 55 to 59 ## 6 60 to 64 ## 7 65 to 69 ## 8 70 to 74 ## 9 75 to 79 ## 10 80 to 84 ## 11 85 to 89 ## 12 90 to 94 ## 13 95 plus ## 14 Under 5 ## 15 5 to 9 ## 16 10 to 14 ## 17 15 to 19 ## 18 20 to 24 ## 19 25 to 29 ## 20 30 to 34 4.1.4 metric_name ## metric_name ## 1 Rate ## 2 Number ## 3 Percent 4.1.5 year ## year ## 1 2019 4.1.6 cause_name ## cause_id cause_name ## 1 294 All causes ## 2 295 Communicable, maternal, neonatal, and nutritional diseases ## 3 297 Tuberculosis ## 4 298 HIV/AIDS ## 5 300 HIV/AIDS resulting in other diseases ## 6 302 Diarrheal diseases ## 7 319 Typhoid fever ## 8 320 Paratyphoid fever ## 9 321 Other intestinal infectious diseases ## 10 322 Lower respiratory infections ## 11 328 Upper respiratory infections ## 12 329 Otitis media ## 13 332 Meningitis ## 14 337 Encephalitis ## 15 338 Diphtheria ## 16 339 Whooping cough ## 17 340 Tetanus ## 18 341 Measles ## 19 342 Varicella and herpes zoster ## 20 344 Neglected tropical diseases and malaria ## 21 345 Malaria ## 22 346 Chagas disease ## 23 347 Leishmaniasis ## 24 348 Visceral leishmaniasis ## 25 349 Cutaneous and mucocutaneous leishmaniasis ## 26 350 African trypanosomiasis ## 27 351 Schistosomiasis ## 28 352 Cysticercosis ## 29 353 Cystic echinococcosis ## 30 354 Lymphatic filariasis ## 31 355 Onchocerciasis ## 32 356 Trachoma ## 33 357 Dengue ## 34 358 Yellow fever ## 35 359 Rabies ## 36 360 Intestinal nematode infections ## 37 361 Ascariasis ## 38 362 Trichuriasis ## 39 363 Hookworm disease ## 40 364 Food-borne trematodiases ## 41 365 Other neglected tropical diseases ## 42 366 Maternal disorders ## 43 367 Maternal hemorrhage ## 44 368 Maternal sepsis and other maternal infections ## 45 369 Maternal hypertensive disorders ## 46 370 Maternal obstructed labor and uterine rupture ## 47 374 Ectopic pregnancy ## 48 375 Indirect maternal deaths ## 49 376 Late maternal deaths ## 50 379 Other maternal disorders ## 51 380 Neonatal disorders ## 52 381 Neonatal preterm birth ## 53 382 Neonatal encephalopathy due to birth asphyxia and trauma ## 54 383 Neonatal sepsis and other neonatal infections ## 55 384 Hemolytic disease and other neonatal jaundice ## 56 385 Other neonatal disorders ## 57 386 Nutritional deficiencies ## 58 387 Protein-energy malnutrition ## 59 388 Iodine deficiency ## 60 389 Vitamin A deficiency ## 61 390 Dietary iron deficiency ## 62 391 Other nutritional deficiencies ## 63 393 Sexually transmitted infections excluding HIV ## 64 394 Syphilis ## 65 395 Chlamydial infection ## 66 396 Gonococcal infection ## 67 397 Trichomoniasis ## 68 398 Genital herpes ## 69 399 Other sexually transmitted infections ## 70 400 Acute hepatitis ## 71 401 Acute hepatitis A ## 72 402 Acute hepatitis B ## 73 403 Acute hepatitis C ## 74 404 Acute hepatitis E ## 75 405 Leprosy ## 76 408 Other unspecified infectious diseases ## 77 409 Non-communicable diseases ## 78 410 Neoplasms ## 79 411 Esophageal cancer ## 80 414 Stomach cancer ## 81 417 Liver cancer ## 82 418 Liver cancer due to hepatitis B ## 83 419 Liver cancer due to hepatitis C ## 84 420 Liver cancer due to alcohol use ## 85 423 Larynx cancer ## 86 426 Tracheal, bronchus, and lung cancer ## 87 429 Breast cancer ## 88 432 Cervical cancer ## 89 435 Uterine cancer ## 90 438 Prostate cancer ## 91 441 Colon and rectum cancer ## 92 444 Lip and oral cavity cancer ## 93 447 Nasopharynx cancer ## 94 450 Other pharynx cancer ## 95 453 Gallbladder and biliary tract cancer ## 96 456 Pancreatic cancer ## 97 459 Malignant skin melanoma ## 98 462 Non-melanoma skin cancer ## 99 465 Ovarian cancer ## 100 468 Testicular cancer ## 101 471 Kidney cancer ## 102 474 Bladder cancer ## 103 477 Brain and central nervous system cancer ## 104 480 Thyroid cancer ## 105 483 Mesothelioma ## 106 484 Hodgkin lymphoma ## 107 485 Non-Hodgkin lymphoma ## 108 486 Multiple myeloma ## 109 487 Leukemia ## 110 490 Other neoplasms ## 111 491 Cardiovascular diseases ## 112 492 Rheumatic heart disease ## 113 493 Ischemic heart disease ## 114 494 Stroke ## 115 495 Ischemic stroke ## 116 496 Intracerebral hemorrhage ## 117 497 Subarachnoid hemorrhage ## 118 498 Hypertensive heart disease ## 119 499 Cardiomyopathy and myocarditis ## 120 500 Atrial fibrillation and flutter ## 121 501 Aortic aneurysm ## 122 502 Peripheral artery disease ## 123 503 Endocarditis ## 124 504 Non-rheumatic valvular heart disease ## 125 508 Chronic respiratory diseases ## 126 509 Chronic obstructive pulmonary disease ## 127 510 Pneumoconiosis ## 128 511 Silicosis ## 129 512 Asbestosis ## 130 513 Coal workers pneumoconiosis ## 131 514 Other pneumoconiosis ## 132 515 Asthma ## 133 516 Interstitial lung disease and pulmonary sarcoidosis ## 134 520 Other chronic respiratory diseases ## 135 521 Cirrhosis and other chronic liver diseases ## 136 522 Cirrhosis and other chronic liver diseases due to hepatitis B ## 137 523 Cirrhosis and other chronic liver diseases due to hepatitis C ## 138 524 Cirrhosis and other chronic liver diseases due to alcohol use ## 139 525 Cirrhosis and other chronic liver diseases due to other causes ## 140 526 Digestive diseases ## 141 527 Peptic ulcer disease ## 142 528 Gastritis and duodenitis ## 143 529 Appendicitis ## 144 530 Paralytic ileus and intestinal obstruction ## 145 531 Inguinal, femoral, and abdominal hernia ## 146 532 Inflammatory bowel disease ## 147 533 Vascular intestinal disorders ## 148 534 Gallbladder and biliary diseases ## 149 535 Pancreatitis ## 150 536 Gastroesophageal reflux disease ## 151 541 Other digestive diseases ## 152 542 Neurological disorders ## 153 543 Alzheimer&#39;s disease and other dementias ## 154 544 Parkinson&#39;s disease ## 155 545 Idiopathic epilepsy ## 156 546 Multiple sclerosis ## 157 547 Migraine ## 158 548 Tension-type headache ## 159 554 Motor neuron disease ## 160 557 Other neurological disorders ## 161 558 Mental disorders ## 162 559 Schizophrenia ## 163 560 Alcohol use disorders ## 164 561 Drug use disorders ## 165 562 Opioid use disorders ## 166 563 Cocaine use disorders ## 167 564 Amphetamine use disorders ## 168 565 Cannabis use disorders ## 169 566 Other drug use disorders ## 170 567 Depressive disorders ## 171 568 Major depressive disorder ## 172 569 Dysthymia ## 173 570 Bipolar disorder ## 174 571 Anxiety disorders ## 175 572 Eating disorders ## 176 573 Anorexia nervosa ## 177 574 Bulimia nervosa ## 178 575 Autism spectrum disorders ## 179 578 Attention-deficit/hyperactivity disorder ## 180 579 Conduct disorder ## 181 582 Idiopathic developmental intellectual disability ## 182 585 Other mental disorders ## 183 587 Diabetes mellitus ## 184 588 Acute glomerulonephritis ## 185 589 Chronic kidney disease ## 186 591 Chronic kidney disease due to hypertension ## 187 592 Chronic kidney disease due to glomerulonephritis ## 188 593 Chronic kidney disease due to other and unspecified causes ## 189 594 Urinary diseases and male infertility ## 190 595 Urinary tract infections and interstitial nephritis ## 191 596 Urolithiasis ## 192 597 Benign prostatic hyperplasia ## 193 598 Male infertility ## 194 602 Other urinary diseases ## 195 603 Gynecological diseases ## 196 604 Uterine fibroids ## 197 605 Polycystic ovarian syndrome ## 198 606 Female infertility ## 199 607 Endometriosis ## 200 608 Genital prolapse ## 201 609 Premenstrual syndrome ## 202 612 Other gynecological diseases ## 203 613 Hemoglobinopathies and hemolytic anemias ## 204 614 Thalassemias ## 205 615 Sickle cell disorders ## 206 616 G6PD deficiency ## 207 618 Other hemoglobinopathies and hemolytic anemias ## 208 619 Endocrine, metabolic, blood, and immune disorders ## 209 626 Musculoskeletal disorders ## 210 627 Rheumatoid arthritis ## 211 628 Osteoarthritis ## 212 630 Low back pain ## 213 631 Neck pain ## 214 632 Gout ## 215 639 Other musculoskeletal disorders ## 216 640 Other non-communicable diseases ## 217 641 Congenital birth defects ## 218 642 Neural tube defects ## 219 643 Congenital heart anomalies ## 220 644 Orofacial clefts ## 221 645 Down syndrome ## 222 646 Turner syndrome ## 223 647 Klinefelter syndrome ## 224 648 Other chromosomal abnormalities ## 225 649 Congenital musculoskeletal and limb anomalies ## 226 650 Urogenital congenital anomalies ## 227 651 Digestive congenital anomalies ## 228 652 Other congenital birth defects ## 229 653 Skin and subcutaneous diseases ## 230 654 Dermatitis ## 231 655 Psoriasis ## 232 656 Cellulitis ## 233 657 Pyoderma ## 234 658 Scabies ## 235 659 Fungal skin diseases ## 236 660 Viral skin diseases ## 237 661 Acne vulgaris ## 238 662 Alopecia areata ## 239 663 Pruritus ## 240 664 Urticaria ## 241 665 Decubitus ulcer ## 242 668 Other skin and subcutaneous diseases ## 243 669 Sense organ diseases ## 244 670 Glaucoma ## 245 671 Cataract ## 246 672 Age-related macular degeneration ## 247 674 Age-related and other hearing loss ## 248 675 Other vision loss ## 249 679 Other sense organ diseases ## 250 680 Oral disorders ## 251 681 Caries of deciduous teeth ## 252 682 Caries of permanent teeth ## 253 683 Periodontal diseases ## 254 684 Edentulism ## 255 685 Other oral disorders ## 256 686 Sudden infant death syndrome ## 257 687 Injuries ## 258 688 Transport injuries ## 259 689 Road injuries ## 260 690 Pedestrian road injuries ## 261 691 Cyclist road injuries ## 262 692 Motorcyclist road injuries ## 263 693 Motor vehicle road injuries ## 264 694 Other road injuries ## 265 695 Other transport injuries ## 266 696 Unintentional injuries ## 267 697 Falls ## 268 698 Drowning ## 269 699 Fire, heat, and hot substances ## 270 700 Poisonings ## 271 701 Poisoning by carbon monoxide ## 272 703 Poisoning by other means ## 273 704 Exposure to mechanical forces ## 274 705 Unintentional firearm injuries ## 275 707 Other exposure to mechanical forces ## 276 708 Adverse effects of medical treatment ## 277 709 Animal contact ## 278 710 Venomous animal contact ## 279 711 Non-venomous animal contact ## 280 712 Foreign body ## 281 713 Pulmonary aspiration and foreign body in airway ## 282 714 Foreign body in eyes ## 283 715 Foreign body in other body part ## 284 716 Other unintentional injuries ## 285 717 Self-harm and interpersonal violence ## 286 718 Self-harm ## 287 721 Self-harm by firearm ## 288 723 Self-harm by other specified means ## 289 724 Interpersonal violence ## 290 725 Physical violence by firearm ## 291 726 Physical violence by sharp object ## 292 727 Physical violence by other means ## 293 729 Exposure to forces of nature ## 294 741 Maternal deaths aggravated by HIV/AIDS ## 295 837 Thalassemias trait ## 296 838 Sickle cell trait ## 297 839 G6PD trait ## 298 842 Environmental heat and cold exposure ## 299 843 Ebola ## 300 845 Acute lymphoid leukemia ## 301 846 Chronic lymphoid leukemia ## 302 847 Acute myeloid leukemia ## 303 848 Chronic myeloid leukemia ## 304 849 Non-melanoma skin cancer (squamous-cell carcinoma) ## 305 850 Non-melanoma skin cancer (basal-cell carcinoma) ## 306 854 Executions and police conflict ## 307 934 Drug-susceptible tuberculosis ## 308 935 Zika virus ## 309 936 Guinea worm disease ## 310 938 Alcoholic cardiomyopathy ## 311 941 Sexual violence ## 312 942 Myocarditis ## 313 943 Other leukemia ## 314 944 Other cardiomyopathy ## 315 945 Conflict and terrorism ## 316 946 Multidrug-resistant tuberculosis without extensive drug resistance ## 317 947 Extensively drug-resistant tuberculosis ## 318 948 HIV/AIDS - Drug-susceptible Tuberculosis ## 319 949 HIV/AIDS - Multidrug-resistant Tuberculosis without extensive drug resistance ## 320 950 HIV/AIDS - Extensively drug-resistant Tuberculosis ## 321 954 Latent tuberculosis infection ## 322 955 HIV/AIDS and sexually transmitted infections ## 323 956 Respiratory infections and tuberculosis ## 324 957 Enteric infections ## 325 958 Typhoid and paratyphoid ## 326 959 Invasive Non-typhoidal Salmonella (iNTS) ## 327 961 Other infectious diseases ## 328 962 Maternal and neonatal disorders ## 329 964 Myelodysplastic, myeloproliferative, and other hematopoietic neoplasms ## 330 965 Benign and in situ intestinal neoplasms ## 331 966 Benign and in situ cervical and uterine neoplasms ## 332 967 Other benign and in situ neoplasms ## 333 968 Non-rheumatic calcific aortic valve disease ## 334 969 Non-rheumatic degenerative mitral valve disease ## 335 970 Other non-rheumatic valve diseases ## 336 971 Cirrhosis and other chronic liver diseases due to NAFLD ## 337 972 Headache disorders ## 338 973 Substance use disorders ## 339 974 Diabetes and kidney diseases ## 340 975 Diabetes mellitus type 1 ## 341 976 Diabetes mellitus type 2 ## 342 977 Atopic dermatitis ## 343 978 Contact dermatitis ## 344 979 Seborrhoeic dermatitis ## 345 980 Bacterial skin diseases ## 346 981 Blindness and vision loss ## 347 992 Upper digestive system diseases ## 348 995 Maternal abortion and miscarriage ## 349 996 Liver cancer due to NASH ## 350 997 Chronic kidney disease due to diabetes mellitus type 1 ## 351 998 Chronic kidney disease due to diabetes mellitus type 2 ## 352 999 Refraction disorders ## 353 1000 Near vision loss ## 354 1014 Osteoarthritis hip ## 355 1015 Osteoarthritis knee ## 356 1016 Osteoarthritis hand ## 357 1017 Osteoarthritis other ## 358 1021 Liver cancer due to other causes ## 359 1022 Other malignant neoplasms ## 360 1023 Other cardiovascular and circulatory diseases ## 361 1026 Total burden related to hepatitis B ## 362 1027 Total burden related to hepatitis C ## 363 1028 Total burden related to Non-alcoholic fatty liver disease (NAFLD) ## 364 1029 Total cancers 4.1.7 Calculator datas ## # A tibble: 27 × 13 ## cause_id type condition OSA_severity gender multiplier OR RR PAF prevalence_base_italy direct…¹ direc…² produ…³ ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 294 mortality All-cause mortality Severe Both 1 NA 1.54 0.075 0.003 NA NA NA ## 2 1023 mortality Cardiovascular mortality Severe Both 1 NA 2.96 0.227 0.001 NA NA NA ## 3 1029 prevalence Cancer Overall Overall Both 1 NA 1.4 0.097 0.042 5718 4581 119 ## 4 669 prevalence Diabetic retinopathy Overall Both 0.124 2.01 NA 0.207 0.026 307 242 579 ## 5 998 prevalence Diabetic kidney disease Overall Both 1 1.59 NA 0.135 0.015 797 NA NA ## 6 976 prevalence Type 2 diabetes Moderate-Severe Both 1 NA 1.63 0.145 0.068 3866 NA 4352 ## 7 619 prevalence Metabolic syndrome Mild Both 2.06 2.39 NA 0.164 0.33 1900 NA 90 ## 8 619 prevalence Metabolic syndrome Moderate-Severe Both 2.06 3.42 NA 0.232 0.33 1900 NA NA ## 9 594 prevalence Erectile dysfunction Overall Male 0.735 NA 1.82 0.228 0.1 407 NA NA ## 10 NA prevalence Female sexual dysfunction Overall Female 1 NA 2 0.153 0.29 761 NA NA ## # … with 17 more rows, and abbreviated variable names ¹​direct_healthcare_cost, ²​direct_nonhealthcare_cost, ³​productivity_losses_cost ## # A tibble: 12 × 5 ## OSA_severity label gender osa_rate population ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Mild Mild (5≤AHI&lt;15) Female 0.29 AGED 15-74 ## 2 Moderate Moderate (15≤AHI&lt;30) Female 0.1 AGED 15-74 ## 3 Severe Severe (AHI≥30) Female 0.09 AGED 15-74 ## 4 Mild Mild (5≤AHI&lt;15) Male 0.25 AGED 15-74 ## 5 Moderate Moderate (15≤AHI&lt;30 Male 0.14 AGED 15-74 ## 6 Severe Severe (AHI≥30) Male 0.22 AGED 15-74 ## 7 Moderate-Severe Moderate-Severe (AHI≥15) Female 0.18 AGED 15-74 ## 8 Moderate-Severe Moderate-Severe (AHI≥15) Male 0.36 AGED 15-74 ## 9 Mild Mild (5≤AHI&lt;15) Both 0.27 AGED 15-74 ## 10 Moderate Moderate (15≤AHI&lt;30) Both 0.12 AGED 15-74 ## 11 Severe Severe (AHI≥30) Both 0.15 AGED 15-74 ## 12 Moderate-Severe Moderate-Severe (AHI≥15) Both 0.27 AGED 15-74 ## # A tibble: 193 × 4 ## location_name pop30_69 `Mild-Moderate-Severe` `Moderate-Severe` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan 8429549 0.361 0.139 ## 2 Albania 1357655 0.627 0.344 ## 3 Algeria 16435999 0.536 0.206 ## 4 Angola 6091184 0.603 0.229 ## 5 Antigua and Barbuda 42485 0.240 0.0708 ## 6 Argentina 19016260 0.286 0.131 ## 7 Armenia 1513141 0.508 0.252 ## 8 Aruba 56900 0.244 0.0481 ## 9 Australia 12110362 0.245 0.0480 ## 10 Austria 4601766 0.487 0.284 ## # … with 183 more rows 4.2 PLOT: Population in countries ## `summarise()` has grouped output by &quot;location_name&quot;. You can override using the `.groups` argument. Figure 4.1: Countries population in 2019. 4.3 PLOT: Finland population 2019 Draw Finland population in 2019 ## `summarise()` has grouped output by &quot;location_name&quot;. You can override using the `.groups` argument. Figure 4.2: Countries population in 2019. 4.4 TABLE: Prevalences Create a table of all prevalences of disease available in the dataset from year 2019. ## `summarise()` has grouped output by &quot;cause_id&quot;. You can override using the `.groups` argument. 4.5 TABLE: Incidences Create a table of all Incidence of disease available in the dataset from year 2019. ## `summarise()` has grouped output by &quot;cause_id&quot;. You can override using the `.groups` argument. 4.6 TABLE: Deaths Create a table of all Incidence of disease available in the dataset from year 2019. ## `summarise()` has grouped output by &quot;cause_id&quot;. You can override using the `.groups` argument. 4.7 TABLE: Prevalences per countries Group prevalences by countries and calculate percentage of the population (15-74 years old). ## `summarise()` has grouped output by &quot;location_name&quot;. You can override using the `.groups` argument. ## [1] 45 ## [1] 359 Disconnect "],["database-for-calculator-shiny.html", "5 Database for Calculator Shiny 5.1 Population datasets 5.2 Prevalences from ihme dataset 5.3 Mortalities from ihme 5.4 Add also base values 5.5 Table: prevalences and mortalities 5.6 OSA values from article (Excel) 5.7 Money index Excel 5.8 Save data to new database", " 5 Database for Calculator Shiny In this chapter we are going to create database, which we can use in Shiny Applications as well in results-section. In Shiny app user can add his input values for sleep apnea prevalences, condition prevalences and costs, and so get more specific results. library(duckdb) library(arrow) library(dplyr) options(scipen = 999) ## Load duckdb con = dbConnect(duckdb::duckdb(), dbdir=&quot;data/sleep22.duckdb&quot;, read_only=TRUE) ## Load from parquet files to duckdb mem # if(FALSE){ # con = dbConnect(duckdb::duckdb(), dbdir=&quot;:MEMORY:&quot;, read_only=FALSE) # fils &lt;- list.files(&quot;data/parquet_database&quot;, full.names = T) # for (fi in fils) { # d &lt;- arrow::read_parquet(file = fi) # nm &lt;- gsub(pattern = &quot;data/parquet_database/&quot;, replacement = &quot;&quot;, x = fi) # nm &lt;- gsub(pattern = &quot;.parquet&quot;, replacement = &quot;&quot;, x = nm) # duckdb::duckdb_register(conn = con, name = nm, df = d) # } # dbListTables(con) # } 5.1 Population datasets Calculating 15-74 years old populations ## 15-74yrs Both, female and male population in wide format library(tidyr) tbl(con, &quot;pop&quot;) %&gt;% filter(age_group &gt; 14 &amp; age_group &lt; 75 &amp; year_id == 2019) %&gt;% group_by(location_name, sex_name) %&gt;% summarise(pop = sum(total_population)) %&gt;% collect() %&gt;% pivot_wider(names_from = sex_name, values_from = pop) %&gt;% rename(pop_both = both, pop_female = female, pop_male = male) %&gt;% mutate( pop_both = round(pop_both, 0), pop_female = round(pop_female, 0), pop_male = round(pop_male, 0), ages = &quot;15-74&quot; ) -&gt; pop ## `summarise()` has grouped output by &quot;location_name&quot;. You can override using the `.groups` argument. head(pop) ## # A tibble: 6 × 5 ## # Groups: location_name [6] ## location_name pop_both pop_female pop_male ages ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Albania 2085677 1042814 1042863 15-74 ## 2 Armenia 2267463 1187751 1079711 15-74 ## 3 Austria 6785345 3390812 3394534 15-74 ## 4 Azerbaijan 7752896 3933115 3819781 15-74 ## 5 Belarus 7249252 3828210 3421042 15-74 ## 6 Belgium 8459697 4236476 4223220 15-74 Total populations ## Total Both, female and male population in wide format library(tidyr) tbl(con, &quot;pop&quot;) %&gt;% filter(year_id == 2019) %&gt;% group_by(location_name, sex_name) %&gt;% summarise(pop = sum(total_population)) %&gt;% collect() %&gt;% pivot_wider(names_from = sex_name, values_from = pop) %&gt;% rename(pop_both = both, pop_female = female, pop_male = male) %&gt;% mutate( pop_both = round(pop_both, 0), pop_female = round(pop_female, 0), pop_male = round(pop_male, 0), ages = &quot;total&quot; ) -&gt; popu_info ## `summarise()` has grouped output by &quot;location_name&quot;. You can override using the `.groups` argument. head(popu_info) ## # A tibble: 6 × 5 ## # Groups: location_name [6] ## location_name pop_both pop_female pop_male ages ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Albania 2720353 1357945 1362408 total ## 2 Armenia 3019674 1562196 1457478 total ## 3 Austria 8916185 4522218 4393968 total ## 4 Azerbaijan 10278674 5136802 5141872 total ## 5 Belarus 9500785 5072640 4428145 total ## 6 Belgium 11419166 5800262 5618903 total ## One dataset pop &lt;- pop %&gt;% rbind(popu_info) 5.2 Prevalences from ihme dataset Calculating prevalences percentages by joining prevalences and population information ## Get cause_id&#39;s which we can use from IHME dataset tbl(con, &quot;causes&quot;) %&gt;% filter(type == &quot;prevalence&quot;) %&gt;% select(cause_id) %&gt;% collect() -&gt; causes causes &lt;- causes$cause_id[!is.na(causes$cause_id)] ## Get number of prevalences per location and causes from IHME (age: 15-74 and sex: both) tbl(con, &quot;ihme&quot;) %&gt;% filter(cause_id %in% causes &amp; metric_name == &quot;Number&quot; &amp; age_id &gt; 7 &amp; age_id &lt; 20 &amp; sex_id == 3) %&gt;% group_by(location_name, cause_id, cause_name) %&gt;% summarise(prevalence_number = sum(val)) %&gt;% arrange(location_name, cause_id) %&gt;% collect() -&gt; prevalences_ihme ## `summarise()` has grouped output by &quot;location_name&quot; and &quot;cause_id&quot;. You can override using the `.groups` argument. ## Calculate Prevalence Rates: join tables prevalences_ihme &amp; pop prevalences_ihme %&gt;% right_join(pop %&gt;% filter(ages == &quot;15-74&quot;), by = &quot;location_name&quot;) %&gt;% mutate(prevalence = prevalence_number / pop_both ) %&gt;% select(location_name, cause_id, cause_name, prevalence) -&gt; prevalences_ihme head(prevalences_ihme) ## # A tibble: 6 × 4 ## # Groups: location_name, cause_id [6] ## location_name cause_id cause_name prevalence ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Albania 369 Maternal hypertensive disorders 0.00142 ## 2 Albania 381 Neonatal preterm birth 0.00547 ## 3 Albania 493 Ischemic heart disease 0.0376 ## 4 Albania 494 Stroke 0.0168 ## 5 Albania 536 Gastroesophageal reflux disease 0.137 ## 6 Albania 594 Urinary diseases and male infertility 0.0997 5.3 Mortalities from ihme Calculating mortalities for two diseases and calculating percentages by joining mortality and population information 1023 Other cardiovascular and circulatory diseases 294 All causes ## Get cause_id&#39;s which base values we can use to overwrite from IHME data tbl(con, &quot;causes&quot;) %&gt;% filter(type == &quot;mortality&quot;) %&gt;% select(cause_id) %&gt;% collect() -&gt; causes causes &lt;- causes$cause_id[!is.na(causes$cause_id)] ## Get mortality values from ihme tbl(con, &quot;ihme&quot;) %&gt;% filter(cause_id %in% causes &amp; measure_name == &quot;Deaths&quot; &amp; metric_name == &quot;Number&quot; &amp; age_id &gt; 7 &amp; age_id &lt; 20 &amp; sex_id == 3) %&gt;% group_by(location_name, cause_id, cause_name) %&gt;% summarise(mortality_number = sum(val)) %&gt;% arrange(location_name, cause_id) %&gt;% collect() -&gt; mortalities_ihme ## `summarise()` has grouped output by &quot;location_name&quot; and &quot;cause_id&quot;. You can override using the `.groups` argument. ## Calculate Rates: join tables mortalities_ihme &amp; pop mortalities_ihme %&gt;% right_join(pop %&gt;% filter(ages == &quot;15-74&quot;), by = &quot;location_name&quot;) %&gt;% mutate(mortality = mortality_number / pop_both) %&gt;% select(location_name, cause_id, cause_name, mortality) -&gt; mortalities_ihme head(mortalities_ihme) ## # A tibble: 6 × 4 ## # Groups: location_name, cause_id [6] ## location_name cause_id cause_name mortality ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Albania 294 All causes 0.00423 ## 2 Albania 1023 Other cardiovascular and circulatory diseases 0.0000757 ## 3 Armenia 294 All causes 0.00573 ## 4 Armenia 1023 Other cardiovascular and circulatory diseases 0.0000190 ## 5 Austria 294 All causes 0.00364 ## 6 Austria 1023 Other cardiovascular and circulatory diseases 0.0000202 ## Join mortalities and prevalance data. Add name to describe value and rename &#39;mortality&#39;/&#39;prevalence&#39; to &#39;value&#39;. prevalences_ihme$type &lt;- &quot;prevalence&quot; mortalities_ihme$type &lt;- &quot;mortality&quot; ihme &lt;- prevalences_ihme %&gt;% rbind(mortalities_ihme) %&gt;% mutate(ihme = ifelse(is.na(prevalence), mortality, prevalence)) %&gt;% select(location_name, cause_id, cause_name, type, ihme) %&gt;% arrange(location_name, type, cause_id) head(ihme) ## # A tibble: 6 × 5 ## # Groups: location_name, cause_id [6] ## location_name cause_id cause_name type ihme ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Albania 294 All causes mortality 0.00423 ## 2 Albania 1023 Other cardiovascular and circulatory diseases mortality 0.0000757 ## 3 Albania 369 Maternal hypertensive disorders prevalence 0.00142 ## 4 Albania 381 Neonatal preterm birth prevalence 0.00547 ## 5 Albania 493 Ischemic heart disease prevalence 0.0376 ## 6 Albania 494 Stroke prevalence 0.0168 rm(list=c(&quot;mortalities_ihme&quot;, &quot;prevalences_ihme&quot;)) 5.4 Add also base values Base data (from excel) and country specific prevalences &amp; mortalities ## Simple causes data / PAF and base values for each country prevalences_base_simple &lt;- NULL for(cntry in unique(ihme$location_name)){ tbl(con, &quot;causes_simple&quot;) %&gt;% collect() %&gt;% mutate(location_name = cntry) %&gt;% select(&quot;location_name&quot;, &quot;cause_id&quot;, &quot;condition&quot;, &quot;PAF&quot;, &quot;multiplier&quot;, &quot;prevalence_base_italy&quot;, &quot;direct_healthcare_cost&quot;, &quot;direct_nonhealthcare_cost&quot;, &quot;productivity_losses_cost&quot;) %&gt;% rbind(prevalences_base_simple) -&gt; prevalences_base_simple } head(prevalences_base_simple) #1296 ## # A tibble: 6 × 9 ## location_name cause_id condition PAF multiplier prevalence_base_italy direct_healthcare_cost direct_nonhealthcare_cost produc…¹ ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 United Kingdom 294 All-cause mortality 0.075 1 0.003 NA NA NA ## 2 United Kingdom 1023 Cardiovascular mortality 0.227 1 0.001 NA NA NA ## 3 United Kingdom 1029 Cancer Overall 0.097 1 0.042 5718 4581 119 ## 4 United Kingdom 669 Diabetic retinopathy 0.207 0.124 0.026 307 242 579 ## 5 United Kingdom 998 Diabetic kidney disease 0.135 1 0.015 797 NA NA ## 6 United Kingdom 976 Type 2 diabetes 0.145 1 0.068 3866 NA 4352 ## # … with abbreviated variable name ¹​productivity_losses_cost ## Multirow causes data / PAF and base values for each country prevalences_base &lt;- NULL for(cntry in unique(ihme$location_name)){ # print(cntry) # tbl(con, &quot;causes&quot;) %&gt;% tbl(con, &quot;causes&quot;) %&gt;% collect() %&gt;% mutate(location_name = cntry) %&gt;% select(&quot;location_name&quot;, &quot;cause_id&quot;, &quot;condition&quot;, &quot;OSA_severity&quot;, &quot;gender&quot;, &quot;OR&quot;, &quot;RR&quot;, &quot;PAF&quot;, &quot;multiplier&quot;, &quot;prevalence_base_italy&quot;, &quot;direct_healthcare_cost&quot;, &quot;direct_nonhealthcare_cost&quot;, &quot;productivity_losses_cost&quot;) %&gt;% rbind(prevalences_base) -&gt; prevalences_base } head(prevalences_base) #1296 ## # A tibble: 6 × 13 ## location_name cause_id condition OSA_severity gender OR RR PAF multiplier prevalence_base_it…¹ direc…² direc…³ produ…⁴ ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 United Kingdom 294 All-cause mortality Severe Both NA 1.54 0.075 1 0.003 NA NA NA ## 2 United Kingdom 1023 Cardiovascular mortality Severe Both NA 2.96 0.227 1 0.001 NA NA NA ## 3 United Kingdom 1029 Cancer Overall Overall Both NA 1.4 0.097 1 0.042 5718 4581 119 ## 4 United Kingdom 669 Diabetic retinopathy Overall Both 2.01 NA 0.207 0.124 0.026 307 242 579 ## 5 United Kingdom 998 Diabetic kidney disease Overall Both 1.59 NA 0.135 1 0.015 797 NA NA ## 6 United Kingdom 976 Type 2 diabetes Moderate-Severe Both NA 1.63 0.145 1 0.068 3866 NA 4352 ## # … with abbreviated variable names ¹​prevalence_base_italy, ²​direct_healthcare_cost, ³​direct_nonhealthcare_cost, ⁴​productivity_losses_cost # 1296 *2 2592 With base values, join new calculated prevalences/mortalities from IHME ## Join base data and new calculated prevalences ## Calculate condition prevalences from ihme data using multiplier (=ratio between armeni and ihme condition) prevalences &lt;- prevalences_base %&gt;% left_join(ihme, by = c(&quot;location_name&quot;, &quot;cause_id&quot;)) %&gt;% select(location_name, condition, OSA_severity, gender, cause_id, cause_name, multiplier, ihme, prevalence_base_italy, OR, RR, PAF, direct_healthcare_cost, direct_nonhealthcare_cost, productivity_losses_cost) %&gt;% right_join( pop %&gt;% filter(ages == &quot;15-74&quot;) %&gt;% select(location_name, pop_both, pop_female, pop_male), by = &quot;location_name&quot;) %&gt;% ## Add the population to all rows mutate(#tamaluku = ihme, ihme = ifelse(is.na(ihme), NA, multiplier * ihme), multiplier = NULL) rm(list = c(&quot;prevalences_base&quot;)) And same to simple table ## Join base data and new calculated prevalences ## Calculate condition prevalences from ihme data using multiplier (=ratio between armeni and ihme condition) prevalences_simple &lt;- prevalences_base_simple %&gt;% left_join(ihme, by = c(&quot;location_name&quot;, &quot;cause_id&quot;)) %&gt;% select(location_name, condition, cause_id, cause_name, multiplier, ihme, prevalence_base_italy, PAF, direct_healthcare_cost, direct_nonhealthcare_cost, productivity_losses_cost) %&gt;% right_join( pop %&gt;% filter(ages == &quot;15-74&quot;) %&gt;% select(location_name, pop_both, pop_female, pop_male), by = &quot;location_name&quot;) %&gt;% ## Add the population to all rows mutate(ihme = ifelse(is.na(ihme), NA, multiplier * ihme), multiplier = NULL) head(prevalences_simple) ## # A tibble: 6 × 13 ## location_name condition cause_id cause_name ihme preva…¹ PAF direc…² direc…³ produ…⁴ pop_b…⁵ pop_f…⁶ pop_m…⁷ ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 United Kingdom All-cause mortality 294 All causes 4.02e-3 0.003 0.075 NA NA NA 4.99e7 2.50e7 2.48e7 ## 2 United Kingdom Cardiovascular mortality 1023 Other cardiovascular and … 4.97e-5 0.001 0.227 NA NA NA 4.99e7 2.50e7 2.48e7 ## 3 United Kingdom Cancer Overall 1029 Total cancers 3.80e-2 0.042 0.097 5718 4581 119 4.99e7 2.50e7 2.48e7 ## 4 United Kingdom Diabetic retinopathy 669 Sense organ diseases 2.52e-2 0.026 0.207 307 242 579 4.99e7 2.50e7 2.48e7 ## 5 United Kingdom Diabetic kidney disease 998 Chronic kidney disease du… 1.28e-2 0.015 0.135 797 NA NA 4.99e7 2.50e7 2.48e7 ## 6 United Kingdom Type 2 diabetes 976 Diabetes mellitus type 2 1.32e-1 0.068 0.145 3866 NA 4352 4.99e7 2.50e7 2.48e7 ## # … with abbreviated variable names ¹​prevalence_base_italy, ²​direct_healthcare_cost, ³​direct_nonhealthcare_cost, ⁴​productivity_losses_cost, ## # ⁵​pop_both, ⁶​pop_female, ⁷​pop_male rm(list = c(&quot;prevalences_base_simple&quot;, &quot;ihme&quot;)) 5.5 Table: prevalences and mortalities DT::datatable(prevalences, rownames = FALSE) 5.6 OSA values from article (Excel) ### TODO left here, get prevelance data for slider library(data.table) ## Read from source excel osa &lt;- readxl::read_xlsx(&quot;files/osa_tables.xlsx&quot;, sheet = &quot;osa_armeni&quot;) ## Sleep apnea prevalences osanew &lt;- readxl::read_xlsx(&quot;files/osa_tables.xlsx&quot;, sheet = &quot;osa_benjafield&quot;) osanew$location_name ## [1] &quot;Afghanistan&quot; &quot;Albania&quot; &quot;Algeria&quot; &quot;Angola&quot; ## [5] &quot;Antigua and Barbuda&quot; &quot;Argentina&quot; &quot;Armenia&quot; &quot;Aruba&quot; ## [9] &quot;Australia&quot; &quot;Austria&quot; &quot;Azerbaijan&quot; &quot;Bahamas&quot; ## [13] &quot;Bahrain&quot; &quot;Bangladesh&quot; &quot;Barbados&quot; &quot;Belarus&quot; ## [17] &quot;Belgium&quot; &quot;Belize&quot; &quot;Benin&quot; &quot;Bhutan&quot; ## [21] &quot;Bolivia&quot; &quot;Bosnia and Herzegovina&quot; &quot;Botswana&quot; &quot;Brazil&quot; ## [25] &quot;Brunei&quot; &quot;Bulgaria&quot; &quot;Burkina Faso&quot; &quot;Burundi&quot; ## [29] &quot;Cape Verde&quot; &quot;Cambodia&quot; &quot;Cameroon&quot; &quot;Canada&quot; ## [33] &quot;Central African Republic&quot; &quot;Chad&quot; &quot;Chile&quot; &quot;China&quot; ## [37] &quot;Colombia&quot; &quot;Comoros&quot; &quot;Congo&quot; &quot;Costa Rica&quot; ## [41] &quot;Côte d&#39;Ivoire&quot; &quot;Croatia&quot; &quot;Cuba&quot; &quot;Curacao&quot; ## [45] &quot;Cyprus&quot; &quot;Czech Republic&quot; &quot;Democratic Republic of the Congo&quot; &quot;Denmark&quot; ## [49] &quot;Djibouti&quot; &quot;Dominican Republic&quot; &quot;Ecuador&quot; &quot;Egypt&quot; ## [53] &quot;El Salvador&quot; &quot;Equatorial Guinea&quot; &quot;Eritrea&quot; &quot;Estonia&quot; ## [57] &quot;eSwatini&quot; &quot;Ethiopia&quot; &quot;Federated States of Micronesia&quot; &quot;Fiji&quot; ## [61] &quot;Finland&quot; &quot;France&quot; &quot;French Polynesia&quot; &quot;Gabon&quot; ## [65] &quot;Gambia&quot; &quot;Georgia&quot; &quot;Germany&quot; &quot;Ghana&quot; ## [69] &quot;Greece&quot; &quot;Grenada&quot; &quot;Guam&quot; &quot;Guatemala&quot; ## [73] &quot;Guinea&quot; &quot;Guinea-Bissau&quot; &quot;Guyana&quot; &quot;Haiti&quot; ## [77] &quot;Honduras&quot; &quot;Hong Kong&quot; &quot;Hungary&quot; &quot;Iceland&quot; ## [81] &quot;India&quot; &quot;Indonesia&quot; &quot;Iran&quot; &quot;Iraq&quot; ## [85] &quot;Ireland&quot; &quot;Israel&quot; &quot;Italy&quot; &quot;Jamaica&quot; ## [89] &quot;Japan&quot; &quot;Jordan&quot; &quot;Kazakhstan&quot; &quot;Kenya&quot; ## [93] &quot;Kiribati&quot; &quot;Kuwait&quot; &quot;Kyrgyzstan&quot; &quot;Laos&quot; ## [97] &quot;Latvia&quot; &quot;Lebanon&quot; &quot;Lesotho&quot; &quot;Liberia&quot; ## [101] &quot;Libya&quot; &quot;Lithuania&quot; &quot;Luxembourg&quot; &quot;Macao&quot; ## [105] &quot;Macedonia&quot; &quot;Madagascar&quot; &quot;Malawi&quot; &quot;Malaysia&quot; ## [109] &quot;Maldives&quot; &quot;Mali&quot; &quot;Malta&quot; &quot;Mauritania&quot; ## [113] &quot;Mauritius&quot; &quot;Mexico&quot; &quot;Moldova&quot; &quot;Mongolia&quot; ## [117] &quot;Montenegro&quot; &quot;Morocco&quot; &quot;Mozambique&quot; &quot;Namibia&quot; ## [121] &quot;Nepal&quot; &quot;Netherlands&quot; &quot;New Caledonia&quot; &quot;New Zealand&quot; ## [125] &quot;Nicaragua&quot; &quot;Niger&quot; &quot;Nigeria&quot; &quot;North Korea&quot; ## [129] &quot;Norway&quot; &quot;Oman&quot; &quot;Pakistan&quot; &quot;Panama&quot; ## [133] &quot;Papua New Guinea&quot; &quot;Paraguay&quot; &quot;Peru&quot; &quot;Philippines&quot; ## [137] &quot;Poland&quot; &quot;Portugal&quot; &quot;Puerto Rico&quot; &quot;Qatar&quot; ## [141] &quot;Romania&quot; &quot;Russia&quot; &quot;Rwanda&quot; &quot;Saint Lucia&quot; ## [145] &quot;Saint Vincent and the Grenadines&quot; &quot;Samoa&quot; &quot;São Tomé and Principe&quot; &quot;Saudi Arabia&quot; ## [149] &quot;Senegal&quot; &quot;Serbia&quot; &quot;Seychelles&quot; &quot;Sierra Leone&quot; ## [153] &quot;Singapore&quot; &quot;Slovakia&quot; &quot;Slovenia&quot; &quot;Solomon Islands&quot; ## [157] &quot;Somalia&quot; &quot;South Africa&quot; &quot;South Korea&quot; &quot;South Sudan&quot; ## [161] &quot;Spain&quot; &quot;Sri Lanka&quot; &quot;Sudan&quot; &quot;Suriname&quot; ## [165] &quot;Sweden&quot; &quot;Switzerland&quot; &quot;Syria&quot; &quot;Taiwan&quot; ## [169] &quot;Tajikistan&quot; &quot;Tanzania&quot; &quot;Thailand&quot; &quot;Timor Leste&quot; ## [173] &quot;Togo&quot; &quot;Tonga&quot; &quot;Trinidad and Tobago&quot; &quot;Tunisia&quot; ## [177] &quot;Turkey&quot; &quot;Turkmenistan&quot; &quot;Uganda&quot; &quot;Ukraine&quot; ## [181] &quot;United Arab Emirates&quot; &quot;United Kingdom&quot; &quot;USA&quot; &quot;Uruguay&quot; ## [185] &quot;Uzbekistan&quot; &quot;Vanuatu&quot; &quot;Venezuela&quot; &quot;Vietnam&quot; ## [189] &quot;Virgin Islands&quot; &quot;Western Sahara&quot; &quot;Yemen&quot; &quot;Zambia&quot; ## [193] &quot;Zimbabwe&quot; ## How many countries are needed length(unique(prevalences$location_name)) ## [1] 45 ## Check which countries are not included in excel length(osanew$location_name[osanew$location_name %in% unique(prevalences$location_name)]) ## [1] 45 ## 3 countries missing, check names which are missing unique(prevalences$location_name)[!unique(prevalences$location_name) %in% osanew$location_name] ## character(0) ## these are not included # [1] &quot;Andorra&quot; &quot;Monaco&quot; &quot;San Marino&quot; ## Filter dataset and Calculate Mild, Moderate, Severe values separately osanew &lt;-osanew %&gt;% filter(location_name %in% unique(prevalences$location_name)) %&gt;% mutate( Mild = `Mild-Moderate-Severe` - `Moderate-Severe`, `Male_Moderate-Severe` = 1.3823 * `Moderate-Severe`, # Gender proportion is calculated from Italy data from Armeni article data `Female_Moderate-Severe` = 0.6508 * `Moderate-Severe`, # Gender proportion is calculated from Italy data from Armeni article data `Both_Moderate-Severe` = `Moderate-Severe`, # Gender proportion is calculated from Italy data from Armeni article data Both_Mild = Mild, Male_Mild = 0.9519 * Mild, # Gender proportion is calculated from Italy data from Armeni article data Female_Mild = 1.0440 * Mild # Gender proportion is calculated from Italy data from Armeni article data ) osanew &lt;- osanew %&gt;% mutate( ## TODO check these with comments Female_Moderate = 0.5342 * `Female_Moderate-Severe`, # Moderate proportion percentage is calculated from Italy data from Armeni article data Female_Severe = 0.4658 * `Female_Moderate-Severe`, # Severe proportion percentage is calculated from Italy data from Armeni article data Male_Moderate = 0.4004 * `Male_Moderate-Severe`, # Moderate proportion percentage is calculated from Italy data from Armeni article data Male_Severe = 0.5996 * `Male_Moderate-Severe` , Both_Moderate = 0.445907 * `Both_Moderate-Severe`, Both_Severe = 0.554093 * `Both_Moderate-Severe` ) ## To longer format library(tidyr) osanew &lt;- osanew %&gt;% tidyr::pivot_longer(c(`Male_Moderate-Severe`, `Male_Moderate`, `Male_Severe`, Male_Mild, `Female_Moderate-Severe`, `Female_Moderate`, `Female_Severe`, Female_Mild, `Both_Moderate-Severe`, `Both_Moderate`, `Both_Severe`, Both_Mild), names_to = &quot;OSA_severity&quot;) %&gt;% rename(osa_rate=value) %&gt;% mutate( ## Get gender and OSA_severity right gender = sub(&quot;_.*&quot;, &quot;&quot;, OSA_severity), OSA_severity = sub(&#39;.+_(.+)&#39;, &#39;\\\\1&#39;, OSA_severity) ) %&gt;% select(location_name, OSA_severity, gender, osa_rate) 5.7 Money index Excel ## First try HICP index, what countries are included ----- ## https://appsso.eurostat.ec.europa.eu/nui/show.do?dataset=prc_hicp_aind&amp;lang=en hicp &lt;- readxl::read_xls(&quot;files/prc_hicp_aind.xls&quot;) hicp$`GEO/TIME`[hicp$`GEO/TIME` == &quot;Germany (until 1990 former territory of the FRG)&quot;] &lt;- &quot;Germany&quot; ## change name of the country ## Calculate correction index to all other countries hicp %&gt;% filter(`GEO/TIME` %in% unique(prevalences$location_name)) %&gt;% rename(location_name = `GEO/TIME`) %&gt;% select(location_name, `2019`) %&gt;% mutate(index = `2019` / hicp$`2019`[hicp$`GEO/TIME` == &quot;Italy&quot;], ver = &quot;EuroStat&quot;) %&gt;% select(location_name, index, ver) -&gt; money_correction ## This is missing few countries so their index correction is 1 (equal to Italy) ## TODO find a way to correct these # unique(prevalences_base$location_name[!prevalences_base$location_name %in% money_correction$location_name]) dbDisconnect(con, shutdown=TRUE) 5.8 Save data to new database 5.8.1 duckdb # library(duckdb) # con = dbConnect(duckdb::duckdb(), dbdir=&quot;./data/sleep22_shiny.duckdb&quot;, read_only=FALSE) # dbWriteTable(con, &quot;prevalences&quot;, prevalences, overwrite=TRUE) # dbWriteTable(con, &quot;pop&quot;, pop, overwrite=TRUE) # dbWriteTable(con, &quot;osa&quot;, osa, overwrite=TRUE) # dbWriteTable(con, &quot;osanew&quot;, osanew, overwrite=TRUE) # dbWriteTable(con, &quot;money_correction&quot;, money_correction, overwrite=TRUE) # dbDisconnect(con) # # con = dbConnect(duckdb::duckdb(), dbdir=&quot;./data/sleep22_shiny.duckdb&quot;, read_only=FALSE) # if(dir.exists(&quot;data/parquet_shiny/&quot;)) fs::dir_delete(&quot;data/parquet_shiny/&quot;) # if(!dir.exists(&quot;data/parquet_shiny/&quot;)) dir.create(&quot;data/parquet_shiny/&quot;) # dbSendQuery(con, &quot;EXPORT DATABASE &#39;data/parquet_shiny/&#39; (FORMAT PARQUET);&quot;) # copy komento? COPY taulu TO ... FORMAT # dbDisconnect(conn = con) ## Copy newdb to sleep22calculator # fils &lt;- c(paste0(here::here(), &quot;/data/sleep22_shiny.duckdb&quot;), paste0(here::here(), &quot;/data/sleep22_shiny.duckdb.wal&quot;)) # fs::file_copy(fils, &quot;/Users/japmiett/projects/sleep22calculator/&quot;, overwrite = T) 5.8.2 Parquet ## Testing another way to save database only to parquet files con = dbConnect(duckdb::duckdb(), dbdir=&quot;:memory:&quot;, read_only=FALSE) ## TODO not working ## Register tbls duckdb::duckdb_register(conn = con, name = &quot;prevalences&quot;, df = prevalences) duckdb::duckdb_register(conn = con, name = &quot;prevalences_simple&quot;, df = prevalences_simple) duckdb::duckdb_register(conn = con, name = &quot;pop&quot;, df = pop) duckdb::duckdb_register(conn = con, name = &quot;osa&quot;, df = osa) duckdb::duckdb_register(conn = con, name = &quot;osanew&quot;, df = osanew) duckdb::duckdb_register(conn = con, name = &quot;money_correction&quot;, df = money_correction) ## Save to parquet dbSendQuery(con, &quot;COPY (SELECT * FROM prevalences) TO &#39;data/parquet_shiny/prevalences.parquet&#39; (FORMAT &#39;parquet&#39;);&quot;) ## &lt;duckdb_result 861b0 connection=ef300 statement=&#39;COPY (SELECT * FROM prevalences) TO &#39;data/parquet_shiny/prevalences.parquet&#39; (FORMAT &#39;parquet&#39;);&#39;&gt; dbSendQuery(con, &quot;COPY (SELECT * FROM pop) TO &#39;data/parquet_shiny/pop.parquet&#39; (FORMAT &#39;parquet&#39;);&quot;) ## &lt;duckdb_result f9890 connection=ef300 statement=&#39;COPY (SELECT * FROM pop) TO &#39;data/parquet_shiny/pop.parquet&#39; (FORMAT &#39;parquet&#39;);&#39;&gt; dbSendQuery(con, &quot;COPY (SELECT * FROM osa) TO &#39;data/parquet_shiny/osa.parquet&#39; (FORMAT &#39;parquet&#39;);&quot;) ## &lt;duckdb_result 7af80 connection=ef300 statement=&#39;COPY (SELECT * FROM osa) TO &#39;data/parquet_shiny/osa.parquet&#39; (FORMAT &#39;parquet&#39;);&#39;&gt; dbSendQuery(con, &quot;COPY (SELECT * FROM osanew) TO &#39;data/parquet_shiny/osanew.parquet&#39; (FORMAT &#39;parquet&#39;);&quot;) ## &lt;duckdb_result 93570 connection=ef300 statement=&#39;COPY (SELECT * FROM osanew) TO &#39;data/parquet_shiny/osanew.parquet&#39; (FORMAT &#39;parquet&#39;);&#39;&gt; dbSendQuery(con, &quot;COPY (SELECT * FROM money_correction) TO &#39;data/parquet_shiny/money_correction.parquet&#39; (FORMAT &#39;parquet&#39;);&quot;) ## &lt;duckdb_result 7dfe0 connection=ef300 statement=&#39;COPY (SELECT * FROM money_correction) TO &#39;data/parquet_shiny/money_correction.parquet&#39; (FORMAT &#39;parquet&#39;);&#39;&gt; dbSendQuery(con, &quot;COPY (SELECT * FROM prevalences_simple) TO &#39;data/parquet_shiny/prevalences_simple.parquet&#39; (FORMAT &#39;parquet&#39;);&quot;) ## &lt;duckdb_result 32150 connection=ef300 statement=&#39;COPY (SELECT * FROM prevalences_simple) TO &#39;data/parquet_shiny/prevalences_simple.parquet&#39; (FORMAT &#39;parquet&#39;);&#39;&gt; dbDisconnect(conn = con) ## Copy to sleep22calculator fils &lt;- list.files(&quot;data/parquet_shiny/&quot;, full.names = T) fs::file_copy(fils, &quot;/Users/japmiett/projects/sleep22calculator/data/&quot;, overwrite = T) "],["data-for-visualizer-shiny.html", "6 Data for Visualizer Shiny 6.1 Calculating main dataset 6.2 Map data 6.3 Save and copy data", " 6 Data for Visualizer Shiny We need this function for calculating PAF from Odd Ratio. ## PAF ODDS RATIO Function ----- ## Give only decimals in parameters # OR = Odds Ratio # PD = having a disease, prevalence # PE = exposed, sleep apnea prevalence # (PE_ = unexposed) paf_or &lt;- function(OR, PD, PE){ PD = PD * 100 PE = PE * 100 PE_ = 100 - PE VALUE1 = (PD * (1 - OR) + PE_ + OR * PE + sqrt( (PD * (1 - OR) + PE_ + OR * PE )^2 - 4 * PE_ * (1 - OR) *PD )) / (2 * PE_ * (1 - OR)) VALUE2 = (PD * (1 - OR) + PE_ + OR * PE - sqrt( (PD * (1 - OR) + PE_ + OR * PE )^2 - 4 * PE_ * (1 - OR) *PD )) / (2 * PE_ * (1 - OR)) VALUE &lt;- ifelse(VALUE1 &lt;= 100 &amp; VALUE1 &gt;= 0, VALUE1, VALUE2) PAF = 1 - ((100 * VALUE) / PD) return(PAF) } 6.1 Calculating main dataset 6.1.1 Population population &lt;- pop %&gt;% filter(ages==&quot;15-74&quot;) 6.1.2 OSA rates ## Fixed multiplier values are calculated from original Armeni article table. dosa &lt;- osanew slapnea_prevalence_female &lt;- dosa$osa_rate[dosa$gender == &quot;Female&quot; &amp; dosa$OSA_severity==&quot;Moderate-Severe&quot;] slapnea_prevalence_male &lt;- dosa$osa_rate[dosa$gender == &quot;Male&quot; &amp; dosa$OSA_severity==&quot;Moderate-Severe&quot;] # dosa$osa_rate[dosa$gender == &quot;Female&quot; &amp; dosa$OSA_severity==&quot;Moderate-Severe&quot;] &lt;- slapnea_prevalence_female / 100 dosa$osa_rate[dosa$gender == &quot;Female&quot; &amp; dosa$OSA_severity==&quot;Moderate&quot;] &lt;- 0.5342 * (slapnea_prevalence_female) dosa$osa_rate[dosa$gender == &quot;Female&quot; &amp; dosa$OSA_severity==&quot;Severe&quot;] &lt;- 0.4658 * (slapnea_prevalence_female) # dosa$osa_rate[dosa$gender == &quot;Male&quot; &amp; dosa$OSA_severity==&quot;Moderate-Severe&quot;] &lt;- slapnea_prevalence_male / 100 dosa$osa_rate[dosa$gender == &quot;Male&quot; &amp; dosa$OSA_severity==&quot;Moderate&quot;] &lt;- 0.4004 * (slapnea_prevalence_male) dosa$osa_rate[dosa$gender == &quot;Male&quot; &amp; dosa$OSA_severity==&quot;Severe&quot;] &lt;- 0.5996 * (slapnea_prevalence_male) dosa$osa_rate[dosa$gender == &quot;Male&quot; &amp; dosa$OSA_severity==&quot;Mild&quot;] &lt;- (slapnea_prevalence_male) / 1.44 dosa$osa_rate[dosa$gender == &quot;Female&quot; &amp; dosa$OSA_severity==&quot;Mild&quot;] &lt;- (slapnea_prevalence_female) / 0.6206897 dosa$osa_rate[dosa$gender == &quot;Both&quot; &amp; dosa$OSA_severity==&quot;Moderate-Severe&quot;] &lt;- (dosa$osa_rate[dosa$gender == &quot;Female&quot; &amp; dosa$OSA_severity==&quot;Moderate-Severe&quot;] * population$pop_female + dosa$osa_rate[dosa$gender == &quot;Male&quot; &amp; dosa$OSA_severity==&quot;Moderate-Severe&quot;] * population$pop_male) / population$pop_both dosa$osa_rate[dosa$gender == &quot;Both&quot; &amp; dosa$OSA_severity==&quot;Moderate&quot;] &lt;- (dosa$osa_rate[dosa$gender == &quot;Female&quot; &amp; dosa$OSA_severity==&quot;Moderate&quot;] * population$pop_female + dosa$osa_rate[dosa$gender == &quot;Male&quot; &amp; dosa$OSA_severity==&quot;Moderate&quot;] * population$pop_male) / population$pop_both dosa$osa_rate[dosa$gender == &quot;Both&quot; &amp; dosa$OSA_severity==&quot;Severe&quot;] &lt;- (dosa$osa_rate[dosa$gender == &quot;Female&quot; &amp; dosa$OSA_severity==&quot;Severe&quot;] * population$pop_female + dosa$osa_rate[dosa$gender == &quot;Male&quot; &amp; dosa$OSA_severity==&quot;Severe&quot;] * population$pop_male) / population$pop_both dosa$osa_rate[dosa$gender == &quot;Both&quot; &amp; dosa$OSA_severity==&quot;Mild&quot;] &lt;- (dosa$osa_rate[dosa$gender == &quot;Female&quot; &amp; dosa$OSA_severity==&quot;Mild&quot;] * population$pop_female + dosa$osa_rate[dosa$gender == &quot;Male&quot; &amp; dosa$OSA_severity==&quot;Mild&quot;] * population$pop_male) / population$pop_both ## COMPARED TO FIXED ITALY VALUES AND ITS OK! 6.1.3 Condition Prevalences and PAF ## Prevalences and OSA rates added d &lt;- prevalences %&gt;% mutate(OSA_severity = ifelse(OSA_severity == &quot;Overall&quot;, &quot;Moderate-Severe&quot;, OSA_severity), prevalence = ifelse(is.na(ihme), prevalence_base_italy, ihme)) %&gt;% left_join(dosa, by = c(&quot;location_name&quot;, &quot;OSA_severity&quot;, &quot;gender&quot;)) %&gt;% left_join(money_correction, by = &quot;location_name&quot;) ## Hard coding change, because Armeni used population of daytime sleepiness, we need to use fixed osa rate. This is estimated d$osa_rate[d$condition == &quot;Car accidents&quot;] &lt;- 0.06885 d$osa_rate[d$condition == &quot;Work accidents&quot;] &lt;- 0.06885 ## Calculate PAFs d &lt;- d %&gt;% group_by(location_name) %&gt;% mutate( ## PAF calculation for Risk Ratio or Odds Ratio: PAFRR = ifelse(!is.na(RR), (osa_rate * (RR - 1) / (osa_rate * (RR - 1) + 1)), NA), PAFOR = ifelse(!is.na(OR), paf_or(OR, prevalence, osa_rate), NA), PAF = ifelse(is.na(PAFOR), ifelse(!is.na(PAFRR), PAFRR, 0), PAFOR), ## Prevalents per conditions prevalent_cases = ifelse(gender==&quot;Both&quot;, prevalence * pop_both, ifelse(gender==&quot;Female&quot;, prevalence * pop_female, prevalence * pop_male)), prevalent_cases_influenced_osa = PAF * prevalent_cases, ## Costs per conditions direct_cost = prevalent_cases_influenced_osa * direct_healthcare_cost, direct_non_healthcare_cost = prevalent_cases_influenced_osa * direct_nonhealthcare_cost, productivity_lost_cost = prevalent_cases_influenced_osa * productivity_losses_cost ) %&gt;% mutate(direct_cost = ifelse(is.na(direct_cost), 0 , direct_cost), direct_non_healthcare_cost = ifelse(is.na(direct_non_healthcare_cost), 0 , direct_non_healthcare_cost), productivity_lost_cost = ifelse(is.na(productivity_lost_cost), 0 , productivity_lost_cost), total_costs = direct_cost + direct_non_healthcare_cost + productivity_lost_cost) # cHeCK # d %&gt;% # filter(location_name == &quot;Finland&quot;) -&gt; temp # write.csv(temp, &quot;temp_finland.csv&quot;) ## Calculater sums per country ## TODO add money index d &lt;- d %&gt;% group_by(location_name, pop_female, pop_male, pop_both, index) %&gt;% summarise(direct_cost = sum(direct_cost, na.rm = T), direct_non_healthcare_cost = sum(direct_non_healthcare_cost, na.rm = T), productivity_lost_cost = sum(productivity_lost_cost, na.rm = T)) %&gt;% ## OSA absolute values with separated moderate/severe calculation (OSA population to divide costs to). mutate( absolute_value_severe_moderate = ( (pop_female * dosa$osa_rate[dosa$OSA_severity == &quot;Moderate-Severe&quot; &amp; dosa$gender == &quot;Female&quot; &amp; dosa$location_name == location_name]) + (pop_male * dosa$osa_rate[dosa$OSA_severity == &quot;Moderate-Severe&quot; &amp; dosa$gender == &quot;Male&quot;&amp; dosa$location_name == location_name])), absolute_value_mild = (pop_female * dosa$osa_rate[dosa$OSA_severity == &quot;Mild&quot; &amp; dosa$gender == &quot;Female&quot;&amp; dosa$location_name == location_name] + pop_male * dosa$osa_rate[dosa$OSA_severity == &quot;Mild&quot; &amp; dosa$gender == &quot;Male&quot;&amp; dosa$location_name == location_name] ), ## Costs per patients patient_direct_cost = direct_cost / absolute_value_severe_moderate, patient_nonhealthcare_cost = direct_non_healthcare_cost / absolute_value_severe_moderate, patient_productivity_cost = productivity_lost_cost / absolute_value_severe_moderate, patient_total_cost = patient_direct_cost + patient_nonhealthcare_cost + patient_productivity_cost, index = ifelse(is.na(index), 1, index) ) ## `summarise()` has grouped output by &#39;location_name&#39;, &#39;pop_female&#39;, &#39;pop_male&#39;, &#39;pop_both&#39;. You can override using the `.groups` argument. ## Write to calculation database saveRDS(d, file = &quot;data/slapnea22.RDS&quot;) ## Write to calculation database # saveRDS(slapnea22_eurostat, file = &quot;data/slapnea22_eurostat.RDS&quot;) 6.2 Map data ## Data for map # Read this shape file with the rgdal library. library(rgdal) world_spdf &lt;- readOGR( dsn= paste0(getwd(),&quot;/data/map/&quot;) , layer=&quot;TM_WORLD_BORDERS_SIMPL-0.3&quot;, verbose=FALSE ) ## Countries in our data countries &lt;- unique(d$location_name) ## Countries in world data # sort(world_spdf$NAME) ## Rename few countries in world data and subset world_spdf$NAME[world_spdf$NAME == &quot;The former Yugoslav Republic of Macedonia&quot;] &lt;- &quot;Macedonia&quot; world_spdf$NAME[world_spdf$NAME == &quot;Republic of Moldova&quot; ] &lt;- &quot;Moldova&quot; europe_spdf &lt;- subset(world_spdf, world_spdf$NAME %in% countries) # countries[!countries %in% europe_spdf$NAME] ## Write to calculation database saveRDS(europe_spdf, file = &quot;data/europe_spdf.RDS&quot;) 6.3 Save and copy data ## Copy to sleep22visualizer fils &lt;- c(paste0(here::here(), &quot;/data/europe_spdf.RDS&quot;), paste0(here::here(), &quot;/data/slapnea22.RDS&quot;), paste0(here::here(), &quot;/data/slapnea22_eurostat.RDS&quot;)) fs::file_copy(fils, &quot;/Users/japmiett/projects/sleep22visualizer/data/&quot;, overwrite = T) "],["validation.html", "7 Validation 7.1 Population 7.2 Prevalences", " 7 Validation Next we are going to validate the calculation to the article Armeni et al. (2019) Cost-of-illness study of Obstructive Sleep Apnea Syndrome (OSAS) in Italy. Because we use different data, results are going to be different, . 7.1 Population Population in Armeni dataset is Aged 15-74: Population Female 22 708 659 Male 22 279 959 Total 44 988 618 In our dataset from IHME data, population is a bit larger: 7.2 Prevalences under construction Prevalences in the article are combined from different datasources (table 9, page 37). We have a bit different prevalences which are shown below: ## Adding missing grouping variables: `pop_female`, `pop_male`, `pop_both` ## Adding missing grouping variables: `pop_female`, `pop_male`, `pop_both` ## Adding missing grouping variables: `pop_female`, `pop_male`, `pop_both` ## Adding missing grouping variables: `pop_female`, `pop_male`, `pop_both` ## `summarise()` has grouped output by &#39;location_name&#39;, &#39;pop_female&#39;, &#39;pop_male&#39;. You can override using the `.groups` argument. ## Adding missing grouping variables: `location_name`, `pop_female`, `pop_male` "],["results-without-money-correction.html", "8 Results without money correction 8.1 Direct costs 8.2 Direct non-healthcare costs 8.3 Productivity loss costs", " 8 Results without money correction This section presents results of the non-money-corrected costs. Total costs are approximally 4100 euros per patient. Maximum cost is 4100 euros per patient in Croatia. ## [1] &quot;Bosnia and Herzegovina&quot; &quot;Czech Republic&quot; ## character(0) ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## Saving 7 x 5 in image Figure 8.1: Estimated sleep apnea costs in Europe per patient in 2019. ## Adding missing grouping variables: `pop_female`, `pop_male`, `pop_both` 8.0.1 Table: cost per patient 8.1 Direct costs Figure 8.2: Estimated sleep apnea direct cost per patient in Europe. 8.1.1 Table: direct cost per patient 8.2 Direct non-healthcare costs Figure 8.3: Estimated sleep apnea direct non-healthcare cost per patient in Europe. 8.2.1 Table: direct non-healthcare cost 8.3 Productivity loss costs Figure 8.4: Estimated sleep apnea productivity losses cost per patient in Europe. 8.3.1 Table: patient productivity cost "],["interactive-applications.html", "9 Interactive applications 9.1 Shiny: Map visualization 9.2 Shiny: Calculator", " 9 Interactive applications Here are links for the Shiny applications created 9.1 Shiny: Map visualization URL: https://janimiettinen.shinyapps.io/sleepapneacost/ 9.2 Shiny: Calculator URL: https://janimiettinen.shinyapps.io/sleepapneacalculator/ "],["references.html", "10 References", " 10 References Web pages and shiny https://bookdown.org/yihui/bookdown/web-pages-and-shiny-apps.html "],["about.html", "11 About", " 11 About This project is systematically documented by using bookdown package. Bookdown is a package, which helps to write chapters and documents in R. We are also finding best practices on working with many/large csv-datasets by using packages such as fs and vroom, tidyverse and duckdb. Memos Github project "],["references-1.html", "12 References", " 12 References Bookdown package duckdb ghdx healthdata Estimation source Index correction datas https://ec.europa.eu/eurostat/web/hicp/data/database "],["testing-output.html", "13 Testing output 13.1 testing", " 13 Testing output 13.1 testing getwd() ## [1] &quot;/Users/japmiett/projects/sleep22/temp&quot; here::here() ## [1] &quot;/Users/japmiett/projects/sleep22&quot; "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
